#!/usr/bin/env python
# -*- coding: ascii -*-
from __future__ import print_function

# NOTICE... this file is generated by TkGridGUI.
# Any code or comments added by the user must be in designated areas ONLY.
# User additions will be lost if they are placed in code-generated areas.
# (i.e. Saving from TkGridGUI will over-write code-generated areas.)

# TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "imports"


from __future__ import unicode_literals
from future import standard_library
standard_library.install_aliases()
from builtins import str
from builtins import range
from builtins import object

from tkinter.ttk import Combobox, Progressbar, Separator, Treeview, Notebook

from tkinter import *
from tkinter import Button, Canvas, Checkbutton, Entry, Frame, Label, LabelFrame
from tkinter import Listbox, Message, Radiobutton, Spinbox, Text
from tkinter import OptionMenu
import tkinter.filedialog
from tkinter import _setit as set_command


# >>>>>>insert any user code below this comment for section "imports"
# Place any user import statements here
import sys

# TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "top_of_init"

if sys.version_info < (3,):
    from tkSimpleDialog import Dialog
else:
    from tkinter.simpledialog import Dialog

class _Dialog(Dialog):
    # use dialogOptions dictionary to set any values in the dialog
    def __init__(self, parent, title = None, dialogOptions=None):
    
        self.dialogOptions = dialogOptions
        Dialog.__init__(self, parent, title)

class myshowinfo(_Dialog):

    def buttonbox(self):
        pass
        # this dummy routine overrides the standard "OK" and "Cancel" buttons
        # REMEMBER!!! to call self.ok() and self.cancel() in User Code

    def body(self, master):
        dialogframe = Frame(master, width=300, height=200)
        self.dialogframe = dialogframe
        dialogframe.pack()

        self.geometry("300x200")

        self.make_Button_1( self.dialogframe )         #      Button: OK : at Main(5,1)
        self.make_Frame_1( self.dialogframe )          #       Frame:  at Main(2,1)
        self.make_Label_1( self.dialogframe )          #       Label: Title : at Main(1,1)


        # >>>>>>insert any user code below this comment for section "top_of_init"
        self.geometry("")
        
        self.Label_1.configure(text=self.title(), width=len(self.title()))
        
        
        fontL = self.dialogOptions.get('fonts',None)
        if fontL is None:
            fontL = ['Helvetica 10 bold roman','Helvetica 10 normal italic']
        
        
        info = self.dialogOptions['info']
        infoL = info.split('\n')
        
        for i,s in enumerate(infoL):
            if s.strip():
                if s.startswith(' '):
                    font = fontL[-1]
                else:
                    font = fontL[0]
                
                label = Label(self.Frame_1, text=s, width=len(s), anchor='w', font=font)
                label.grid(row=i, column=1, sticky='w')

                if self.bg_color:
                    label.configure(bg=self.bg_color)

        label = Label(self.Frame_1, text='')
        label.grid(row=i+1, column=1)
        if self.bg_color:
            label.configure(bg=self.bg_color)
            self.dialogframe.configure(bg=self.bg_color)
            self.configure(bg=self.bg_color)

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Button_1"
    def make_Button_1(self, frame):
        """      Button: OK : at Main(5,1)"""
        self.Button_1 = Button( frame , text="OK", width="15")
        self.Button_1.grid(row=5, column=1)

        # >>>>>>insert any user code below this comment for section "make_Button_1"
        self.bg_color = self.dialogOptions.get('bg','')

        self.Button_1.bind("<ButtonRelease-1>", self.Button_1_Click)
        if self.bg_color:
            self.Button_1.configure(bg='#fef8ff')

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Frame_1"
    def make_Frame_1(self, frame):
        """       Frame:  at Main(2,1)"""
        self.Frame_1 = Frame( frame )
        self.Frame_1.grid(row=2, column=1)

        # >>>>>>insert any user code below this comment for section "make_Frame_1"
        if self.bg_color:
            self.Frame_1.configure(bg=self.bg_color)


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "make_Label_1"
    def make_Label_1(self, frame):
        """       Label: Title : at Main(1,1)"""
        self.Label_1 = Label( frame , text="Title", width="7", font="Helvetica 20 bold roman")
        self.Label_1.grid(row=1, column=1, sticky="ew")

        # >>>>>>insert any user code below this comment for section "make_Label_1"
        if self.bg_color:
            self.Label_1.configure(bg=self.bg_color)


    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "Button_1_Click"
    def Button_1_Click(self, event): #bind method for component ID=Button_1
        """      Button: OK : at Main(5,1)"""
        pass
        # >>>>>>insert any user code below this comment for section "Button_1_Click"
        # replace, delete, or comment-out the following
        #print( "executed method Button_1_Click" )
        self.cancel()

    # TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "dialog_validate"
    def validate(self):
        self.result = {} # return a dictionary of results
    


        # >>>>>>insert any user code below this comment for section "dialog_validate"
        # set values in "self.result" dictionary for return
        # for example...
        # self.result["age"] = self.Entry_2_StringVar.get() 


        self.result["test"] = "test message" 
        return 1
# TkGridGUI generated code. DO NOT EDIT THE FOLLOWING. section "end"


    def apply(self):
        pass
        #print( 'apply called' )
        
INFO = """
        
Basic Usage: 
  Select Widget in Listbox with Left Click.
  Place Widget with Left Click in grid.

Edit Widget:
  Right Click Widget in Grid or Preview Window.

Move Widget:
  Left Button Drag and Drop in Grid.

Duplicate Widget: 
  Left Click Widget in Grid.
  Left Click in grid to place the duplicate.

Insert Row or Column 
    Left Click on "+" control.

Add Weight to row or column 
    Left Click "wt" control.

Container Widgets
    Select Grid Tab for Main, Frames, RadioGroups etc.
"""

class _Testdialog:
    def __init__(self, master):
        frame = Frame(master, width=300, height=300)
        frame.pack()
        self.master = master
        self.x, self.y, self.w, self.h = -1,-1,-1,-1
        
        self.Button_1 = Button(text="Test Dialog", relief="raised", width="15")
        self.Button_1.place(x=84, y=36)
        self.Button_1.bind("<ButtonRelease-1>", self.Button_1_Click)

    def Button_1_Click(self, event): #click method for component ID=1
        dialog = myshowinfo(self.master, "Test Dialog", dialogOptions={'info':INFO, 'bg':'#EAFFFE'})
        print( '===============Result from Dialog====================' )
        print( dialog.result )
        print( '=====================================================' )

def main():
    root = Tk()
    app = _Testdialog(root)
    root.mainloop()

if __name__ == '__main__':
    main()
